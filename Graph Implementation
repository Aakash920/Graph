package graphs;

import java.util.*;

public class Graph {
	public static class Edge{
		int src;
		int dst;
		public Edge(int s, int d) {
			this.src=s;
			this.dst=d;
		}
	}
	public static void main(String[] args) {
		int V=7;
		ArrayList<Edge> graph[]=new ArrayList[V];
		createGraph(graph);
		//print full graph
//		for(int j=0 ; j<graph.length ; j++) {
//			for(int i=0 ; i<graph[j].size(); i++) {
//				Edge e=graph[j].get(i);
//				System.out.println(e.src+"->"+e.dst);
//			}
//		}
//		bfs(graph,V);
//		boolean[] vis=new boolean[V];
//		for(int i=0 ; i<V ; i++) {
//			if(vis[i]==false) {
//				bfsDisconnected(graph,V,vis,i);
//			}
//		}
		
//		boolean[] vis=new boolean[V];
//		for(int i=0 ; i<V ; i++) {
//			if(vis[i]==false) {
//				dfs(graph,i,vis);
//			}
//		}
		boolean[] vis=new boolean[V];
		printAllPaths(graph,vis,0,"0",5);
	}
	public static void createGraph(ArrayList<Edge> graph[]) {
		//we've to apply this loop just because to avoid Null Pointer Exception
		//because before this loop null value is stored in array on every index
		//so, we store empty ArrayList over there!!
		
		for(int i=0 ; i<graph.length ; i++) {
			graph[i]=new ArrayList<Edge>();
		}
		graph[0].add(new Edge(0,1));
		graph[0].add(new Edge(0,2));
		
		graph[1].add(new Edge(1,0));
		graph[1].add(new Edge(1,3));
		
		graph[2].add(new Edge(2,0));
		graph[2].add(new Edge(2,4));
		
		graph[3].add(new Edge(3,1));
		graph[3].add(new Edge(3,4));
		graph[3].add(new Edge(3,5));
		
		graph[4].add(new Edge(4,2));
		graph[4].add(new Edge(4,3));
		graph[4].add(new Edge(4,5));
		
		graph[5].add(new Edge(5,3));
		graph[5].add(new Edge(5,4));
		graph[5].add(new Edge(5,6));
		
		graph[6].add(new Edge(6,5));
		
		
	}
	
//	TC: O(V+E)
//	public static void bfs(ArrayList<Edge> graph[], int V) {
//		Queue<Integer> q=new LinkedList<>();
//		boolean[] vis=new boolean[V];
//		q.add(0);
//		while(!q.isEmpty()) {
//			int curr=q.remove();
//			if(vis[curr]==false) {
//				System.out.print(curr+" ");
//				vis[curr]=true;
//				for(int i=0 ; i<graph[curr].size() ; i++) {
//					Edge e=graph[curr].get(i);
//					q.add(e.dst);
//				}
//			}
//		}
//	}
	
//	when graph is connected to each other 
//	If not then we can make visited array in main function & pass in bfs function.
//  pass another variable start cause we don't know the starting point of graph.
	
//	TC: O(V+E)
	public static void bfsDisconnected(ArrayList<Edge> graph[], int V, boolean[] vis, int start) {
		Queue<Integer> q=new LinkedList<>();
		q.add(start);
		while(!q.isEmpty()) {
			int curr=q.remove();
			if(vis[curr]==false) {
				System.out.print(curr+" ");
				vis[curr]=true;
				for(int i=0 ; i<graph[curr].size() ; i++) {
					Edge e=graph[curr].get(i);
					q.add(e.dst);
				}
			}
		}
	}
		public static void dfs(ArrayList<Edge> graph[], int curr, boolean vis[]) {
			System.out.print(curr+" ");
			vis[curr]=true;
			for(int i=0 ; i<graph[curr].size() ; i++) {
				Edge e=graph[curr].get(i);
				if(vis[e.dst]==false) {
					dfs(graph,e.dst,vis);	
				}
			}
		}
		public static void printAllPaths(ArrayList<Edge> graph[],boolean vis[], int curr, String path, int target) {
			if(curr==target) {
				System.out.println(path);
				return;
			}
			
			for(int i=0 ; i<graph[curr].size() ; i++) {
				Edge e=graph[curr].get(i);
				if(!vis[e.dst]) {
					vis[curr]=true;
					printAllPaths(graph,vis,e.dst,path+e.dst,target);
					vis[curr]=false;
				}
			}
		}
	}

